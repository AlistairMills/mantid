/* ICatDOIH.h
   Generated by gSOAP 2.8.15 from ICatDOI.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ICatDOIH_H
#define ICatDOIH_H
#include "ICatDOIStub.h"

namespace ICatDOI {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 ICatDOI_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 ICatDOI_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 ICatDOI_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_byte
#define SOAP_TYPE_ICatDOI_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( ICatDOI::soap_serialize_byte(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_int
#define SOAP_TYPE_ICatDOI_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( ICatDOI::soap_serialize_int(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_LONG64
#define SOAP_TYPE_ICatDOI_LONG64 (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( ICatDOI::soap_serialize_LONG64(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_std__string
#define SOAP_TYPE_ICatDOI_std__string (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerDatafileDOIResponse
#define SOAP_TYPE_ICatDOI_ns1__registerDatafileDOIResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerDatafileDOIResponse(struct soap*, const char*, int, const ns1__registerDatafileDOIResponse *, const char*);
SOAP_FMAC3 ns1__registerDatafileDOIResponse * SOAP_FMAC4 soap_in_ns1__registerDatafileDOIResponse(struct soap*, const char*, ns1__registerDatafileDOIResponse *, const char*);

#ifndef soap_write_ns1__registerDatafileDOIResponse
#define soap_write_ns1__registerDatafileDOIResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerDatafileDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatafileDOIResponse * SOAP_FMAC4 soap_get_ns1__registerDatafileDOIResponse(struct soap*, ns1__registerDatafileDOIResponse *, const char*, const char*);

#ifndef soap_read_ns1__registerDatafileDOIResponse
#define soap_read_ns1__registerDatafileDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerDatafileDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerDatafileDOIResponse * SOAP_FMAC2 soap_instantiate_ns1__registerDatafileDOIResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerDatafileDOIResponse * soap_new_ns1__registerDatafileDOIResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerDatafileDOIResponse(soap, n, NULL, NULL, NULL); }

inline ns1__registerDatafileDOIResponse * soap_new_req_ns1__registerDatafileDOIResponse(struct soap *soap) { ns1__registerDatafileDOIResponse *_p = soap_instantiate_ns1__registerDatafileDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__registerDatafileDOIResponse * soap_new_set_ns1__registerDatafileDOIResponse(struct soap *soap, std::string *return_) { ns1__registerDatafileDOIResponse *_p = soap_instantiate_ns1__registerDatafileDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatafileDOIResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__registerDatafileDOIResponse(struct soap *soap, ns1__registerDatafileDOIResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerDatafileDOIResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerDatafileDOI
#define SOAP_TYPE_ICatDOI_ns1__registerDatafileDOI (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerDatafileDOI(struct soap*, const char*, int, const ns1__registerDatafileDOI *, const char*);
SOAP_FMAC3 ns1__registerDatafileDOI * SOAP_FMAC4 soap_in_ns1__registerDatafileDOI(struct soap*, const char*, ns1__registerDatafileDOI *, const char*);

#ifndef soap_write_ns1__registerDatafileDOI
#define soap_write_ns1__registerDatafileDOI(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerDatafileDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatafileDOI * SOAP_FMAC4 soap_get_ns1__registerDatafileDOI(struct soap*, ns1__registerDatafileDOI *, const char*, const char*);

#ifndef soap_read_ns1__registerDatafileDOI
#define soap_read_ns1__registerDatafileDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerDatafileDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerDatafileDOI * SOAP_FMAC2 soap_instantiate_ns1__registerDatafileDOI(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerDatafileDOI * soap_new_ns1__registerDatafileDOI(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerDatafileDOI(soap, n, NULL, NULL, NULL); }

inline ns1__registerDatafileDOI * soap_new_req_ns1__registerDatafileDOI(struct soap *soap, LONG64 arg1) { ns1__registerDatafileDOI *_p = soap_instantiate_ns1__registerDatafileDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatafileDOI::arg1 = arg1; } return _p; }

inline ns1__registerDatafileDOI * soap_new_set_ns1__registerDatafileDOI(struct soap *soap, std::string *arg0, LONG64 arg1) { ns1__registerDatafileDOI *_p = soap_instantiate_ns1__registerDatafileDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatafileDOI::arg0 = arg0; _p->ns1__registerDatafileDOI::arg1 = arg1; } return _p; }

inline void soap_delete_ns1__registerDatafileDOI(struct soap *soap, ns1__registerDatafileDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerDatafileDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerInvestigationDOIResponse
#define SOAP_TYPE_ICatDOI_ns1__registerInvestigationDOIResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerInvestigationDOIResponse(struct soap*, const char*, int, const ns1__registerInvestigationDOIResponse *, const char*);
SOAP_FMAC3 ns1__registerInvestigationDOIResponse * SOAP_FMAC4 soap_in_ns1__registerInvestigationDOIResponse(struct soap*, const char*, ns1__registerInvestigationDOIResponse *, const char*);

#ifndef soap_write_ns1__registerInvestigationDOIResponse
#define soap_write_ns1__registerInvestigationDOIResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerInvestigationDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerInvestigationDOIResponse * SOAP_FMAC4 soap_get_ns1__registerInvestigationDOIResponse(struct soap*, ns1__registerInvestigationDOIResponse *, const char*, const char*);

#ifndef soap_read_ns1__registerInvestigationDOIResponse
#define soap_read_ns1__registerInvestigationDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerInvestigationDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerInvestigationDOIResponse * SOAP_FMAC2 soap_instantiate_ns1__registerInvestigationDOIResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerInvestigationDOIResponse * soap_new_ns1__registerInvestigationDOIResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerInvestigationDOIResponse(soap, n, NULL, NULL, NULL); }

inline ns1__registerInvestigationDOIResponse * soap_new_req_ns1__registerInvestigationDOIResponse(struct soap *soap) { ns1__registerInvestigationDOIResponse *_p = soap_instantiate_ns1__registerInvestigationDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__registerInvestigationDOIResponse * soap_new_set_ns1__registerInvestigationDOIResponse(struct soap *soap, std::string *return_) { ns1__registerInvestigationDOIResponse *_p = soap_instantiate_ns1__registerInvestigationDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerInvestigationDOIResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__registerInvestigationDOIResponse(struct soap *soap, ns1__registerInvestigationDOIResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerInvestigationDOIResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerInvestigationDOI
#define SOAP_TYPE_ICatDOI_ns1__registerInvestigationDOI (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerInvestigationDOI(struct soap*, const char*, int, const ns1__registerInvestigationDOI *, const char*);
SOAP_FMAC3 ns1__registerInvestigationDOI * SOAP_FMAC4 soap_in_ns1__registerInvestigationDOI(struct soap*, const char*, ns1__registerInvestigationDOI *, const char*);

#ifndef soap_write_ns1__registerInvestigationDOI
#define soap_write_ns1__registerInvestigationDOI(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerInvestigationDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerInvestigationDOI * SOAP_FMAC4 soap_get_ns1__registerInvestigationDOI(struct soap*, ns1__registerInvestigationDOI *, const char*, const char*);

#ifndef soap_read_ns1__registerInvestigationDOI
#define soap_read_ns1__registerInvestigationDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerInvestigationDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerInvestigationDOI * SOAP_FMAC2 soap_instantiate_ns1__registerInvestigationDOI(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerInvestigationDOI * soap_new_ns1__registerInvestigationDOI(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerInvestigationDOI(soap, n, NULL, NULL, NULL); }

inline ns1__registerInvestigationDOI * soap_new_req_ns1__registerInvestigationDOI(struct soap *soap, LONG64 arg1) { ns1__registerInvestigationDOI *_p = soap_instantiate_ns1__registerInvestigationDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerInvestigationDOI::arg1 = arg1; } return _p; }

inline ns1__registerInvestigationDOI * soap_new_set_ns1__registerInvestigationDOI(struct soap *soap, std::string *arg0, LONG64 arg1) { ns1__registerInvestigationDOI *_p = soap_instantiate_ns1__registerInvestigationDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerInvestigationDOI::arg0 = arg0; _p->ns1__registerInvestigationDOI::arg1 = arg1; } return _p; }

inline void soap_delete_ns1__registerInvestigationDOI(struct soap *soap, ns1__registerInvestigationDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerInvestigationDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__ICATException
#define SOAP_TYPE_ICatDOI_ns1__ICATException (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ICATException(struct soap*, const char*, int, const ns1__ICATException *, const char*);
SOAP_FMAC3 ns1__ICATException * SOAP_FMAC4 soap_in_ns1__ICATException(struct soap*, const char*, ns1__ICATException *, const char*);

#ifndef soap_write_ns1__ICATException
#define soap_write_ns1__ICATException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:ICATException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__ICATException * SOAP_FMAC4 soap_get_ns1__ICATException(struct soap*, ns1__ICATException *, const char*, const char*);

#ifndef soap_read_ns1__ICATException
#define soap_read_ns1__ICATException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__ICATException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__ICATException * SOAP_FMAC2 soap_instantiate_ns1__ICATException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ICATException * soap_new_ns1__ICATException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ICATException(soap, n, NULL, NULL, NULL); }

inline ns1__ICATException * soap_new_req_ns1__ICATException(struct soap *soap) { ns1__ICATException *_p = soap_instantiate_ns1__ICATException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ICATException * soap_new_set_ns1__ICATException(struct soap *soap, std::string *message) { ns1__ICATException *_p = soap_instantiate_ns1__ICATException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ICATException::message = message; } return _p; }

inline void soap_delete_ns1__ICATException(struct soap *soap, ns1__ICATException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ICATException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__InternalException
#define SOAP_TYPE_ICatDOI_ns1__InternalException (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InternalException(struct soap*, const char*, int, const ns1__InternalException *, const char*);
SOAP_FMAC3 ns1__InternalException * SOAP_FMAC4 soap_in_ns1__InternalException(struct soap*, const char*, ns1__InternalException *, const char*);

#ifndef soap_write_ns1__InternalException
#define soap_write_ns1__InternalException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:InternalException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__InternalException * SOAP_FMAC4 soap_get_ns1__InternalException(struct soap*, ns1__InternalException *, const char*, const char*);

#ifndef soap_read_ns1__InternalException
#define soap_read_ns1__InternalException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__InternalException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__InternalException * SOAP_FMAC2 soap_instantiate_ns1__InternalException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InternalException * soap_new_ns1__InternalException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__InternalException(soap, n, NULL, NULL, NULL); }

inline ns1__InternalException * soap_new_req_ns1__InternalException(struct soap *soap) { ns1__InternalException *_p = soap_instantiate_ns1__InternalException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__InternalException * soap_new_set_ns1__InternalException(struct soap *soap, std::string *message) { ns1__InternalException *_p = soap_instantiate_ns1__InternalException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__InternalException::message = message; } return _p; }

inline void soap_delete_ns1__InternalException(struct soap *soap, ns1__InternalException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__InternalException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__DoiException
#define SOAP_TYPE_ICatDOI_ns1__DoiException (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DoiException(struct soap*, const char*, int, const ns1__DoiException *, const char*);
SOAP_FMAC3 ns1__DoiException * SOAP_FMAC4 soap_in_ns1__DoiException(struct soap*, const char*, ns1__DoiException *, const char*);

#ifndef soap_write_ns1__DoiException
#define soap_write_ns1__DoiException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:DoiException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DoiException * SOAP_FMAC4 soap_get_ns1__DoiException(struct soap*, ns1__DoiException *, const char*, const char*);

#ifndef soap_read_ns1__DoiException
#define soap_read_ns1__DoiException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__DoiException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__DoiException * SOAP_FMAC2 soap_instantiate_ns1__DoiException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DoiException * soap_new_ns1__DoiException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DoiException(soap, n, NULL, NULL, NULL); }

inline ns1__DoiException * soap_new_req_ns1__DoiException(struct soap *soap) { ns1__DoiException *_p = soap_instantiate_ns1__DoiException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__DoiException * soap_new_set_ns1__DoiException(struct soap *soap, std::string *message) { ns1__DoiException *_p = soap_instantiate_ns1__DoiException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__DoiException::message = message; } return _p; }

inline void soap_delete_ns1__DoiException(struct soap *soap, ns1__DoiException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DoiException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__DataNotFoundException
#define SOAP_TYPE_ICatDOI_ns1__DataNotFoundException (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataNotFoundException(struct soap*, const char*, int, const ns1__DataNotFoundException *, const char*);
SOAP_FMAC3 ns1__DataNotFoundException * SOAP_FMAC4 soap_in_ns1__DataNotFoundException(struct soap*, const char*, ns1__DataNotFoundException *, const char*);

#ifndef soap_write_ns1__DataNotFoundException
#define soap_write_ns1__DataNotFoundException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:DataNotFoundException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DataNotFoundException * SOAP_FMAC4 soap_get_ns1__DataNotFoundException(struct soap*, ns1__DataNotFoundException *, const char*, const char*);

#ifndef soap_read_ns1__DataNotFoundException
#define soap_read_ns1__DataNotFoundException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__DataNotFoundException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__DataNotFoundException * SOAP_FMAC2 soap_instantiate_ns1__DataNotFoundException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DataNotFoundException * soap_new_ns1__DataNotFoundException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DataNotFoundException(soap, n, NULL, NULL, NULL); }

inline ns1__DataNotFoundException * soap_new_req_ns1__DataNotFoundException(struct soap *soap) { ns1__DataNotFoundException *_p = soap_instantiate_ns1__DataNotFoundException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__DataNotFoundException * soap_new_set_ns1__DataNotFoundException(struct soap *soap, std::string *message) { ns1__DataNotFoundException *_p = soap_instantiate_ns1__DataNotFoundException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__DataNotFoundException::message = message; } return _p; }

inline void soap_delete_ns1__DataNotFoundException(struct soap *soap, ns1__DataNotFoundException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DataNotFoundException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerDatasetDOIResponse
#define SOAP_TYPE_ICatDOI_ns1__registerDatasetDOIResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerDatasetDOIResponse(struct soap*, const char*, int, const ns1__registerDatasetDOIResponse *, const char*);
SOAP_FMAC3 ns1__registerDatasetDOIResponse * SOAP_FMAC4 soap_in_ns1__registerDatasetDOIResponse(struct soap*, const char*, ns1__registerDatasetDOIResponse *, const char*);

#ifndef soap_write_ns1__registerDatasetDOIResponse
#define soap_write_ns1__registerDatasetDOIResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerDatasetDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatasetDOIResponse * SOAP_FMAC4 soap_get_ns1__registerDatasetDOIResponse(struct soap*, ns1__registerDatasetDOIResponse *, const char*, const char*);

#ifndef soap_read_ns1__registerDatasetDOIResponse
#define soap_read_ns1__registerDatasetDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerDatasetDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerDatasetDOIResponse * SOAP_FMAC2 soap_instantiate_ns1__registerDatasetDOIResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerDatasetDOIResponse * soap_new_ns1__registerDatasetDOIResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerDatasetDOIResponse(soap, n, NULL, NULL, NULL); }

inline ns1__registerDatasetDOIResponse * soap_new_req_ns1__registerDatasetDOIResponse(struct soap *soap) { ns1__registerDatasetDOIResponse *_p = soap_instantiate_ns1__registerDatasetDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__registerDatasetDOIResponse * soap_new_set_ns1__registerDatasetDOIResponse(struct soap *soap, std::string *return_) { ns1__registerDatasetDOIResponse *_p = soap_instantiate_ns1__registerDatasetDOIResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatasetDOIResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__registerDatasetDOIResponse(struct soap *soap, ns1__registerDatasetDOIResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerDatasetDOIResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI_ns1__registerDatasetDOI
#define SOAP_TYPE_ICatDOI_ns1__registerDatasetDOI (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerDatasetDOI(struct soap*, const char*, int, const ns1__registerDatasetDOI *, const char*);
SOAP_FMAC3 ns1__registerDatasetDOI * SOAP_FMAC4 soap_in_ns1__registerDatasetDOI(struct soap*, const char*, ns1__registerDatasetDOI *, const char*);

#ifndef soap_write_ns1__registerDatasetDOI
#define soap_write_ns1__registerDatasetDOI(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:registerDatasetDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatasetDOI * SOAP_FMAC4 soap_get_ns1__registerDatasetDOI(struct soap*, ns1__registerDatasetDOI *, const char*, const char*);

#ifndef soap_read_ns1__registerDatasetDOI
#define soap_read_ns1__registerDatasetDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_ns1__registerDatasetDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__registerDatasetDOI * SOAP_FMAC2 soap_instantiate_ns1__registerDatasetDOI(struct soap*, int, const char*, const char*, size_t*);

inline ns1__registerDatasetDOI * soap_new_ns1__registerDatasetDOI(struct soap *soap, int n = -1) { return soap_instantiate_ns1__registerDatasetDOI(soap, n, NULL, NULL, NULL); }

inline ns1__registerDatasetDOI * soap_new_req_ns1__registerDatasetDOI(struct soap *soap, LONG64 arg1) { ns1__registerDatasetDOI *_p = soap_instantiate_ns1__registerDatasetDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatasetDOI::arg1 = arg1; } return _p; }

inline ns1__registerDatasetDOI * soap_new_set_ns1__registerDatasetDOI(struct soap *soap, std::string *arg0, LONG64 arg1) { ns1__registerDatasetDOI *_p = soap_instantiate_ns1__registerDatasetDOI(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__registerDatasetDOI::arg0 = arg0; _p->ns1__registerDatasetDOI::arg1 = arg1; } return _p; }

inline void soap_delete_ns1__registerDatasetDOI(struct soap *soap, ns1__registerDatasetDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__registerDatasetDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_SOAP_ENV__Fault
#define SOAP_TYPE_ICatDOI_SOAP_ENV__Fault (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( ICatDOI::soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_SOAP_ENV__Reason
#define SOAP_TYPE_ICatDOI_SOAP_ENV__Reason (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( ICatDOI::soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_SOAP_ENV__Code
#define SOAP_TYPE_ICatDOI_SOAP_ENV__Code (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( ICatDOI::soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_SOAP_ENV__Header
#define SOAP_TYPE_ICatDOI_SOAP_ENV__Header (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( ICatDOI::soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ICatDOI___ns1__registerDatasetDOI
#define SOAP_TYPE_ICatDOI___ns1__registerDatasetDOI (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__registerDatasetDOI(struct soap*, struct __ns1__registerDatasetDOI *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__registerDatasetDOI(struct soap*, const struct __ns1__registerDatasetDOI *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__registerDatasetDOI(struct soap*, const char*, int, const struct __ns1__registerDatasetDOI *, const char*);
SOAP_FMAC3 struct __ns1__registerDatasetDOI * SOAP_FMAC4 soap_in___ns1__registerDatasetDOI(struct soap*, const char*, struct __ns1__registerDatasetDOI *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__registerDatasetDOI(struct soap*, const struct __ns1__registerDatasetDOI *, const char*, const char*);

#ifndef soap_write___ns1__registerDatasetDOI
#define soap_write___ns1__registerDatasetDOI(soap, data) ( ICatDOI::soap_serialize___ns1__registerDatasetDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put___ns1__registerDatasetDOI(soap, data, "-ns1:registerDatasetDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__registerDatasetDOI * SOAP_FMAC4 soap_get___ns1__registerDatasetDOI(struct soap*, struct __ns1__registerDatasetDOI *, const char*, const char*);

#ifndef soap_read___ns1__registerDatasetDOI
#define soap_read___ns1__registerDatasetDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get___ns1__registerDatasetDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__registerDatasetDOI * SOAP_FMAC2 soap_instantiate___ns1__registerDatasetDOI(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__registerDatasetDOI * soap_new___ns1__registerDatasetDOI(struct soap *soap, int n = -1) { return soap_instantiate___ns1__registerDatasetDOI(soap, n, NULL, NULL, NULL); }

inline struct __ns1__registerDatasetDOI * soap_new_req___ns1__registerDatasetDOI(struct soap *soap) { struct __ns1__registerDatasetDOI *_p = soap_instantiate___ns1__registerDatasetDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerDatasetDOI(soap, _p); } return _p; }

inline struct __ns1__registerDatasetDOI * soap_new_set___ns1__registerDatasetDOI(struct soap *soap, ns1__registerDatasetDOI *ns1__registerDatasetDOI_) { struct __ns1__registerDatasetDOI *_p = soap_instantiate___ns1__registerDatasetDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerDatasetDOI(soap, _p); _p->ns1__registerDatasetDOI_ = ns1__registerDatasetDOI_; } return _p; }

inline void soap_delete___ns1__registerDatasetDOI(struct soap *soap, struct __ns1__registerDatasetDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__registerDatasetDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI___ns1__registerDatafileDOI
#define SOAP_TYPE_ICatDOI___ns1__registerDatafileDOI (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__registerDatafileDOI(struct soap*, struct __ns1__registerDatafileDOI *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__registerDatafileDOI(struct soap*, const struct __ns1__registerDatafileDOI *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__registerDatafileDOI(struct soap*, const char*, int, const struct __ns1__registerDatafileDOI *, const char*);
SOAP_FMAC3 struct __ns1__registerDatafileDOI * SOAP_FMAC4 soap_in___ns1__registerDatafileDOI(struct soap*, const char*, struct __ns1__registerDatafileDOI *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__registerDatafileDOI(struct soap*, const struct __ns1__registerDatafileDOI *, const char*, const char*);

#ifndef soap_write___ns1__registerDatafileDOI
#define soap_write___ns1__registerDatafileDOI(soap, data) ( ICatDOI::soap_serialize___ns1__registerDatafileDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put___ns1__registerDatafileDOI(soap, data, "-ns1:registerDatafileDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__registerDatafileDOI * SOAP_FMAC4 soap_get___ns1__registerDatafileDOI(struct soap*, struct __ns1__registerDatafileDOI *, const char*, const char*);

#ifndef soap_read___ns1__registerDatafileDOI
#define soap_read___ns1__registerDatafileDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get___ns1__registerDatafileDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__registerDatafileDOI * SOAP_FMAC2 soap_instantiate___ns1__registerDatafileDOI(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__registerDatafileDOI * soap_new___ns1__registerDatafileDOI(struct soap *soap, int n = -1) { return soap_instantiate___ns1__registerDatafileDOI(soap, n, NULL, NULL, NULL); }

inline struct __ns1__registerDatafileDOI * soap_new_req___ns1__registerDatafileDOI(struct soap *soap) { struct __ns1__registerDatafileDOI *_p = soap_instantiate___ns1__registerDatafileDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerDatafileDOI(soap, _p); } return _p; }

inline struct __ns1__registerDatafileDOI * soap_new_set___ns1__registerDatafileDOI(struct soap *soap, ns1__registerDatafileDOI *ns1__registerDatafileDOI_) { struct __ns1__registerDatafileDOI *_p = soap_instantiate___ns1__registerDatafileDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerDatafileDOI(soap, _p); _p->ns1__registerDatafileDOI_ = ns1__registerDatafileDOI_; } return _p; }

inline void soap_delete___ns1__registerDatafileDOI(struct soap *soap, struct __ns1__registerDatafileDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__registerDatafileDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ICatDOI___ns1__registerInvestigationDOI
#define SOAP_TYPE_ICatDOI___ns1__registerInvestigationDOI (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__registerInvestigationDOI(struct soap*, struct __ns1__registerInvestigationDOI *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__registerInvestigationDOI(struct soap*, const struct __ns1__registerInvestigationDOI *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__registerInvestigationDOI(struct soap*, const char*, int, const struct __ns1__registerInvestigationDOI *, const char*);
SOAP_FMAC3 struct __ns1__registerInvestigationDOI * SOAP_FMAC4 soap_in___ns1__registerInvestigationDOI(struct soap*, const char*, struct __ns1__registerInvestigationDOI *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__registerInvestigationDOI(struct soap*, const struct __ns1__registerInvestigationDOI *, const char*, const char*);

#ifndef soap_write___ns1__registerInvestigationDOI
#define soap_write___ns1__registerInvestigationDOI(soap, data) ( ICatDOI::soap_serialize___ns1__registerInvestigationDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put___ns1__registerInvestigationDOI(soap, data, "-ns1:registerInvestigationDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__registerInvestigationDOI * SOAP_FMAC4 soap_get___ns1__registerInvestigationDOI(struct soap*, struct __ns1__registerInvestigationDOI *, const char*, const char*);

#ifndef soap_read___ns1__registerInvestigationDOI
#define soap_read___ns1__registerInvestigationDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get___ns1__registerInvestigationDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__registerInvestigationDOI * SOAP_FMAC2 soap_instantiate___ns1__registerInvestigationDOI(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__registerInvestigationDOI * soap_new___ns1__registerInvestigationDOI(struct soap *soap, int n = -1) { return soap_instantiate___ns1__registerInvestigationDOI(soap, n, NULL, NULL, NULL); }

inline struct __ns1__registerInvestigationDOI * soap_new_req___ns1__registerInvestigationDOI(struct soap *soap) { struct __ns1__registerInvestigationDOI *_p = soap_instantiate___ns1__registerInvestigationDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerInvestigationDOI(soap, _p); } return _p; }

inline struct __ns1__registerInvestigationDOI * soap_new_set___ns1__registerInvestigationDOI(struct soap *soap, ns1__registerInvestigationDOI *ns1__registerInvestigationDOI_) { struct __ns1__registerInvestigationDOI *_p = soap_instantiate___ns1__registerInvestigationDOI(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__registerInvestigationDOI(soap, _p); _p->ns1__registerInvestigationDOI_ = ns1__registerInvestigationDOI_; } return _p; }

inline void soap_delete___ns1__registerInvestigationDOI(struct soap *soap, struct __ns1__registerInvestigationDOI *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__registerInvestigationDOI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_SOAP_ENV__Detail
#define SOAP_TYPE_ICatDOI_SOAP_ENV__Detail (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( ICatDOI::soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, ns1__DataNotFoundException *ns1__DataNotFoundException_, ns1__DoiException *ns1__DoiException_, ns1__ICATException *ns1__ICATException_, ns1__InternalException *ns1__InternalException_, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->ns1__DataNotFoundException_ = ns1__DataNotFoundException_; _p->ns1__DoiException_ = ns1__DoiException_; _p->ns1__ICATException_ = ns1__ICATException_; _p->ns1__InternalException_ = ns1__InternalException_; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Reason (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( ICatDOI::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Detail (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( ICatDOI::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Code
#define SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Code (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( ICatDOI::soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerDatasetDOIResponse
#define SOAP_TYPE_ICatDOI_PointerTons1__registerDatasetDOIResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerDatasetDOIResponse(struct soap*, ns1__registerDatasetDOIResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerDatasetDOIResponse(struct soap*, const char *, int, ns1__registerDatasetDOIResponse *const*, const char *);
SOAP_FMAC3 ns1__registerDatasetDOIResponse ** SOAP_FMAC4 soap_in_PointerTons1__registerDatasetDOIResponse(struct soap*, const char*, ns1__registerDatasetDOIResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerDatasetDOIResponse(struct soap*, ns1__registerDatasetDOIResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerDatasetDOIResponse
#define soap_write_PointerTons1__registerDatasetDOIResponse(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerDatasetDOIResponse(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerDatasetDOIResponse(soap, data, "ns1:registerDatasetDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatasetDOIResponse ** SOAP_FMAC4 soap_get_PointerTons1__registerDatasetDOIResponse(struct soap*, ns1__registerDatasetDOIResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerDatasetDOIResponse
#define soap_read_PointerTons1__registerDatasetDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerDatasetDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerDatasetDOI
#define SOAP_TYPE_ICatDOI_PointerTons1__registerDatasetDOI (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerDatasetDOI(struct soap*, ns1__registerDatasetDOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerDatasetDOI(struct soap*, const char *, int, ns1__registerDatasetDOI *const*, const char *);
SOAP_FMAC3 ns1__registerDatasetDOI ** SOAP_FMAC4 soap_in_PointerTons1__registerDatasetDOI(struct soap*, const char*, ns1__registerDatasetDOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerDatasetDOI(struct soap*, ns1__registerDatasetDOI *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerDatasetDOI
#define soap_write_PointerTons1__registerDatasetDOI(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerDatasetDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerDatasetDOI(soap, data, "ns1:registerDatasetDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatasetDOI ** SOAP_FMAC4 soap_get_PointerTons1__registerDatasetDOI(struct soap*, ns1__registerDatasetDOI **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerDatasetDOI
#define soap_read_PointerTons1__registerDatasetDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerDatasetDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerDatafileDOIResponse
#define SOAP_TYPE_ICatDOI_PointerTons1__registerDatafileDOIResponse (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerDatafileDOIResponse(struct soap*, ns1__registerDatafileDOIResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerDatafileDOIResponse(struct soap*, const char *, int, ns1__registerDatafileDOIResponse *const*, const char *);
SOAP_FMAC3 ns1__registerDatafileDOIResponse ** SOAP_FMAC4 soap_in_PointerTons1__registerDatafileDOIResponse(struct soap*, const char*, ns1__registerDatafileDOIResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerDatafileDOIResponse(struct soap*, ns1__registerDatafileDOIResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerDatafileDOIResponse
#define soap_write_PointerTons1__registerDatafileDOIResponse(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerDatafileDOIResponse(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerDatafileDOIResponse(soap, data, "ns1:registerDatafileDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatafileDOIResponse ** SOAP_FMAC4 soap_get_PointerTons1__registerDatafileDOIResponse(struct soap*, ns1__registerDatafileDOIResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerDatafileDOIResponse
#define soap_read_PointerTons1__registerDatafileDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerDatafileDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerDatafileDOI
#define SOAP_TYPE_ICatDOI_PointerTons1__registerDatafileDOI (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerDatafileDOI(struct soap*, ns1__registerDatafileDOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerDatafileDOI(struct soap*, const char *, int, ns1__registerDatafileDOI *const*, const char *);
SOAP_FMAC3 ns1__registerDatafileDOI ** SOAP_FMAC4 soap_in_PointerTons1__registerDatafileDOI(struct soap*, const char*, ns1__registerDatafileDOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerDatafileDOI(struct soap*, ns1__registerDatafileDOI *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerDatafileDOI
#define soap_write_PointerTons1__registerDatafileDOI(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerDatafileDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerDatafileDOI(soap, data, "ns1:registerDatafileDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerDatafileDOI ** SOAP_FMAC4 soap_get_PointerTons1__registerDatafileDOI(struct soap*, ns1__registerDatafileDOI **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerDatafileDOI
#define soap_read_PointerTons1__registerDatafileDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerDatafileDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerInvestigationDOIResponse
#define SOAP_TYPE_ICatDOI_PointerTons1__registerInvestigationDOIResponse (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerInvestigationDOIResponse(struct soap*, ns1__registerInvestigationDOIResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerInvestigationDOIResponse(struct soap*, const char *, int, ns1__registerInvestigationDOIResponse *const*, const char *);
SOAP_FMAC3 ns1__registerInvestigationDOIResponse ** SOAP_FMAC4 soap_in_PointerTons1__registerInvestigationDOIResponse(struct soap*, const char*, ns1__registerInvestigationDOIResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerInvestigationDOIResponse(struct soap*, ns1__registerInvestigationDOIResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerInvestigationDOIResponse
#define soap_write_PointerTons1__registerInvestigationDOIResponse(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerInvestigationDOIResponse(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerInvestigationDOIResponse(soap, data, "ns1:registerInvestigationDOIResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerInvestigationDOIResponse ** SOAP_FMAC4 soap_get_PointerTons1__registerInvestigationDOIResponse(struct soap*, ns1__registerInvestigationDOIResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerInvestigationDOIResponse
#define soap_read_PointerTons1__registerInvestigationDOIResponse(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerInvestigationDOIResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__registerInvestigationDOI
#define SOAP_TYPE_ICatDOI_PointerTons1__registerInvestigationDOI (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerInvestigationDOI(struct soap*, ns1__registerInvestigationDOI *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerInvestigationDOI(struct soap*, const char *, int, ns1__registerInvestigationDOI *const*, const char *);
SOAP_FMAC3 ns1__registerInvestigationDOI ** SOAP_FMAC4 soap_in_PointerTons1__registerInvestigationDOI(struct soap*, const char*, ns1__registerInvestigationDOI **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerInvestigationDOI(struct soap*, ns1__registerInvestigationDOI *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__registerInvestigationDOI
#define soap_write_PointerTons1__registerInvestigationDOI(soap, data) ( ICatDOI::soap_serialize_PointerTons1__registerInvestigationDOI(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__registerInvestigationDOI(soap, data, "ns1:registerInvestigationDOI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__registerInvestigationDOI ** SOAP_FMAC4 soap_get_PointerTons1__registerInvestigationDOI(struct soap*, ns1__registerInvestigationDOI **, const char*, const char*);

#ifndef soap_read_PointerTons1__registerInvestigationDOI
#define soap_read_PointerTons1__registerInvestigationDOI(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__registerInvestigationDOI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__InternalException
#define SOAP_TYPE_ICatDOI_PointerTons1__InternalException (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InternalException(struct soap*, ns1__InternalException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InternalException(struct soap*, const char *, int, ns1__InternalException *const*, const char *);
SOAP_FMAC3 ns1__InternalException ** SOAP_FMAC4 soap_in_PointerTons1__InternalException(struct soap*, const char*, ns1__InternalException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InternalException(struct soap*, ns1__InternalException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__InternalException
#define soap_write_PointerTons1__InternalException(soap, data) ( ICatDOI::soap_serialize_PointerTons1__InternalException(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__InternalException(soap, data, "ns1:InternalException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__InternalException ** SOAP_FMAC4 soap_get_PointerTons1__InternalException(struct soap*, ns1__InternalException **, const char*, const char*);

#ifndef soap_read_PointerTons1__InternalException
#define soap_read_PointerTons1__InternalException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__InternalException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__ICATException
#define SOAP_TYPE_ICatDOI_PointerTons1__ICATException (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ICATException(struct soap*, ns1__ICATException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ICATException(struct soap*, const char *, int, ns1__ICATException *const*, const char *);
SOAP_FMAC3 ns1__ICATException ** SOAP_FMAC4 soap_in_PointerTons1__ICATException(struct soap*, const char*, ns1__ICATException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ICATException(struct soap*, ns1__ICATException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ICATException
#define soap_write_PointerTons1__ICATException(soap, data) ( ICatDOI::soap_serialize_PointerTons1__ICATException(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__ICATException(soap, data, "ns1:ICATException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__ICATException ** SOAP_FMAC4 soap_get_PointerTons1__ICATException(struct soap*, ns1__ICATException **, const char*, const char*);

#ifndef soap_read_PointerTons1__ICATException
#define soap_read_PointerTons1__ICATException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__ICATException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__DoiException
#define SOAP_TYPE_ICatDOI_PointerTons1__DoiException (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DoiException(struct soap*, ns1__DoiException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DoiException(struct soap*, const char *, int, ns1__DoiException *const*, const char *);
SOAP_FMAC3 ns1__DoiException ** SOAP_FMAC4 soap_in_PointerTons1__DoiException(struct soap*, const char*, ns1__DoiException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DoiException(struct soap*, ns1__DoiException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DoiException
#define soap_write_PointerTons1__DoiException(soap, data) ( ICatDOI::soap_serialize_PointerTons1__DoiException(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__DoiException(soap, data, "ns1:DoiException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DoiException ** SOAP_FMAC4 soap_get_PointerTons1__DoiException(struct soap*, ns1__DoiException **, const char*, const char*);

#ifndef soap_read_PointerTons1__DoiException
#define soap_read_PointerTons1__DoiException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__DoiException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTons1__DataNotFoundException
#define SOAP_TYPE_ICatDOI_PointerTons1__DataNotFoundException (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DataNotFoundException(struct soap*, ns1__DataNotFoundException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DataNotFoundException(struct soap*, const char *, int, ns1__DataNotFoundException *const*, const char *);
SOAP_FMAC3 ns1__DataNotFoundException ** SOAP_FMAC4 soap_in_PointerTons1__DataNotFoundException(struct soap*, const char*, ns1__DataNotFoundException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DataNotFoundException(struct soap*, ns1__DataNotFoundException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DataNotFoundException
#define soap_write_PointerTons1__DataNotFoundException(soap, data) ( ICatDOI::soap_serialize_PointerTons1__DataNotFoundException(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTons1__DataNotFoundException(soap, data, "ns1:DataNotFoundException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__DataNotFoundException ** SOAP_FMAC4 soap_get_PointerTons1__DataNotFoundException(struct soap*, ns1__DataNotFoundException **, const char*, const char*);

#ifndef soap_read_PointerTons1__DataNotFoundException
#define soap_read_PointerTons1__DataNotFoundException(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTons1__DataNotFoundException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_PointerTostd__string
#define SOAP_TYPE_ICatDOI_PointerTostd__string (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( ICatDOI::soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI__QName
#define SOAP_TYPE_ICatDOI__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( ICatDOI::soap_serialize__QName(soap, data), soap_begin_send(soap) || ICatDOI::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ICatDOI_string
#define SOAP_TYPE_ICatDOI_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( ICatDOI::soap_serialize_string(soap, data), soap_begin_send(soap) || ICatDOI::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !ICatDOI::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


} // namespace ICatDOI


#endif

/* End of ICatDOIH.h */
