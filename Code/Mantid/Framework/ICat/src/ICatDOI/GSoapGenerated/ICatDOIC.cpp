/* ICatDOIC.cpp
   Generated by gSOAP 2.8.15 from ICatDOIService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "MantidICat/ICatDOI/GSoapGenerated/ICatDOIH.h"

namespace ICatDOI {

SOAP_SOURCE_STAMP("@(#) ICatDOIC.cpp ver 2.8.15 2014-04-08 14:13:30 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_ICatDOI_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_ICatDOI_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ICatDOI_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ICatDOI_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse:
		return soap_in_ICatDOI1__registerDatafileDOIResponse(soap, NULL, NULL, "ICatDOI1:registerDatafileDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI:
		return soap_in_ICatDOI1__registerDatafileDOI(soap, NULL, NULL, "ICatDOI1:registerDatafileDOI");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse:
		return soap_in_ICatDOI1__registerInvestigationDOIResponse(soap, NULL, NULL, "ICatDOI1:registerInvestigationDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI:
		return soap_in_ICatDOI1__registerInvestigationDOI(soap, NULL, NULL, "ICatDOI1:registerInvestigationDOI");
	case SOAP_TYPE_ICatDOI_ICatDOI1__ICATException:
		return soap_in_ICatDOI1__ICATException(soap, NULL, NULL, "ICatDOI1:ICATException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__InternalException:
		return soap_in_ICatDOI1__InternalException(soap, NULL, NULL, "ICatDOI1:InternalException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__DoiException:
		return soap_in_ICatDOI1__DoiException(soap, NULL, NULL, "ICatDOI1:DoiException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException:
		return soap_in_ICatDOI1__DataNotFoundException(soap, NULL, NULL, "ICatDOI1:DataNotFoundException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse:
		return soap_in_ICatDOI1__registerDatasetDOIResponse(soap, NULL, NULL, "ICatDOI1:registerDatasetDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI:
		return soap_in_ICatDOI1__registerDatasetDOI(soap, NULL, NULL, "ICatDOI1:registerDatasetDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOIResponse:
		return soap_in_PointerToICatDOI1__registerDatasetDOIResponse(soap, NULL, NULL, "ICatDOI1:registerDatasetDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOI:
		return soap_in_PointerToICatDOI1__registerDatasetDOI(soap, NULL, NULL, "ICatDOI1:registerDatasetDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOIResponse:
		return soap_in_PointerToICatDOI1__registerDatafileDOIResponse(soap, NULL, NULL, "ICatDOI1:registerDatafileDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOI:
		return soap_in_PointerToICatDOI1__registerDatafileDOI(soap, NULL, NULL, "ICatDOI1:registerDatafileDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOIResponse:
		return soap_in_PointerToICatDOI1__registerInvestigationDOIResponse(soap, NULL, NULL, "ICatDOI1:registerInvestigationDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOI:
		return soap_in_PointerToICatDOI1__registerInvestigationDOI(soap, NULL, NULL, "ICatDOI1:registerInvestigationDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__InternalException:
		return soap_in_PointerToICatDOI1__InternalException(soap, NULL, NULL, "ICatDOI1:InternalException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__ICATException:
		return soap_in_PointerToICatDOI1__ICATException(soap, NULL, NULL, "ICatDOI1:ICATException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DoiException:
		return soap_in_PointerToICatDOI1__DoiException(soap, NULL, NULL, "ICatDOI1:DoiException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DataNotFoundException:
		return soap_in_PointerToICatDOI1__DataNotFoundException(soap, NULL, NULL, "ICatDOI1:DataNotFoundException");
	case SOAP_TYPE_ICatDOI_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ICatDOI__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_ICatDOI_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_ICatDOI_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerDatafileDOIResponse"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse;
			return soap_in_ICatDOI1__registerDatafileDOIResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerDatafileDOI"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI;
			return soap_in_ICatDOI1__registerDatafileDOI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerInvestigationDOIResponse"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse;
			return soap_in_ICatDOI1__registerInvestigationDOIResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerInvestigationDOI"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI;
			return soap_in_ICatDOI1__registerInvestigationDOI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:ICATException"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__ICATException;
			return soap_in_ICatDOI1__ICATException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:InternalException"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__InternalException;
			return soap_in_ICatDOI1__InternalException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:DoiException"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__DoiException;
			return soap_in_ICatDOI1__DoiException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:DataNotFoundException"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException;
			return soap_in_ICatDOI1__DataNotFoundException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerDatasetDOIResponse"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse;
			return soap_in_ICatDOI1__registerDatasetDOIResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ICatDOI1:registerDatasetDOI"))
		{	*type = SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI;
			return soap_in_ICatDOI1__registerDatasetDOI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_ICatDOI_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_ICatDOI_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_ICatDOI_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_ICatDOI__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_ICatDOI_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_ICatDOI_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_ICatDOI_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ICatDOI_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_ICatDOI_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse:
		return ((ICatDOI1__registerDatafileDOIResponse *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerDatafileDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI:
		return ((ICatDOI1__registerDatafileDOI *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerDatafileDOI");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse:
		return ((ICatDOI1__registerInvestigationDOIResponse *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerInvestigationDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI:
		return ((ICatDOI1__registerInvestigationDOI *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerInvestigationDOI");
	case SOAP_TYPE_ICatDOI_ICatDOI1__ICATException:
		return ((ICatDOI1__ICATException *)ptr)->soap_out(soap, tag, id, "ICatDOI1:ICATException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__InternalException:
		return ((ICatDOI1__InternalException *)ptr)->soap_out(soap, tag, id, "ICatDOI1:InternalException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__DoiException:
		return ((ICatDOI1__DoiException *)ptr)->soap_out(soap, tag, id, "ICatDOI1:DoiException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException:
		return ((ICatDOI1__DataNotFoundException *)ptr)->soap_out(soap, tag, id, "ICatDOI1:DataNotFoundException");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse:
		return ((ICatDOI1__registerDatasetDOIResponse *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerDatasetDOIResponse");
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI:
		return ((ICatDOI1__registerDatasetDOI *)ptr)->soap_out(soap, tag, id, "ICatDOI1:registerDatasetDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOIResponse:
		return soap_out_PointerToICatDOI1__registerDatasetDOIResponse(soap, tag, id, (ICatDOI1__registerDatasetDOIResponse *const*)ptr, "ICatDOI1:registerDatasetDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOI:
		return soap_out_PointerToICatDOI1__registerDatasetDOI(soap, tag, id, (ICatDOI1__registerDatasetDOI *const*)ptr, "ICatDOI1:registerDatasetDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOIResponse:
		return soap_out_PointerToICatDOI1__registerDatafileDOIResponse(soap, tag, id, (ICatDOI1__registerDatafileDOIResponse *const*)ptr, "ICatDOI1:registerDatafileDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOI:
		return soap_out_PointerToICatDOI1__registerDatafileDOI(soap, tag, id, (ICatDOI1__registerDatafileDOI *const*)ptr, "ICatDOI1:registerDatafileDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOIResponse:
		return soap_out_PointerToICatDOI1__registerInvestigationDOIResponse(soap, tag, id, (ICatDOI1__registerInvestigationDOIResponse *const*)ptr, "ICatDOI1:registerInvestigationDOIResponse");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOI:
		return soap_out_PointerToICatDOI1__registerInvestigationDOI(soap, tag, id, (ICatDOI1__registerInvestigationDOI *const*)ptr, "ICatDOI1:registerInvestigationDOI");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__InternalException:
		return soap_out_PointerToICatDOI1__InternalException(soap, tag, id, (ICatDOI1__InternalException *const*)ptr, "ICatDOI1:InternalException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__ICATException:
		return soap_out_PointerToICatDOI1__ICATException(soap, tag, id, (ICatDOI1__ICATException *const*)ptr, "ICatDOI1:ICATException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DoiException:
		return soap_out_PointerToICatDOI1__DoiException(soap, tag, id, (ICatDOI1__DoiException *const*)ptr, "ICatDOI1:DoiException");
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DataNotFoundException:
		return soap_out_PointerToICatDOI1__DataNotFoundException(soap, tag, id, (ICatDOI1__DataNotFoundException *const*)ptr, "ICatDOI1:DataNotFoundException");
	case SOAP_TYPE_ICatDOI_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_ICatDOI__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_ICatDOI_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ICatDOI_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse:
		((ICatDOI1__registerDatafileDOIResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI:
		((ICatDOI1__registerDatafileDOI *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse:
		((ICatDOI1__registerInvestigationDOIResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI:
		((ICatDOI1__registerInvestigationDOI *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__ICATException:
		((ICatDOI1__ICATException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__InternalException:
		((ICatDOI1__InternalException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__DoiException:
		((ICatDOI1__DoiException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException:
		((ICatDOI1__DataNotFoundException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse:
		((ICatDOI1__registerDatasetDOIResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI:
		((ICatDOI1__registerDatasetDOI *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatasetDOI:
		soap_serialize___ICatDOI1__registerDatasetDOI(soap, (const struct __ICatDOI1__registerDatasetDOI *)ptr);
		break;
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatafileDOI:
		soap_serialize___ICatDOI1__registerDatafileDOI(soap, (const struct __ICatDOI1__registerDatafileDOI *)ptr);
		break;
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerInvestigationDOI:
		soap_serialize___ICatDOI1__registerInvestigationDOI(soap, (const struct __ICatDOI1__registerInvestigationDOI *)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOIResponse:
		soap_serialize_PointerToICatDOI1__registerDatasetDOIResponse(soap, (ICatDOI1__registerDatasetDOIResponse *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOI:
		soap_serialize_PointerToICatDOI1__registerDatasetDOI(soap, (ICatDOI1__registerDatasetDOI *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOIResponse:
		soap_serialize_PointerToICatDOI1__registerDatafileDOIResponse(soap, (ICatDOI1__registerDatafileDOIResponse *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOI:
		soap_serialize_PointerToICatDOI1__registerDatafileDOI(soap, (ICatDOI1__registerDatafileDOI *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOIResponse:
		soap_serialize_PointerToICatDOI1__registerInvestigationDOIResponse(soap, (ICatDOI1__registerInvestigationDOIResponse *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOI:
		soap_serialize_PointerToICatDOI1__registerInvestigationDOI(soap, (ICatDOI1__registerInvestigationDOI *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__InternalException:
		soap_serialize_PointerToICatDOI1__InternalException(soap, (ICatDOI1__InternalException *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__ICATException:
		soap_serialize_PointerToICatDOI1__ICATException(soap, (ICatDOI1__ICATException *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DoiException:
		soap_serialize_PointerToICatDOI1__DoiException(soap, (ICatDOI1__DoiException *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerToICatDOI1__DataNotFoundException:
		soap_serialize_PointerToICatDOI1__DataNotFoundException(soap, (ICatDOI1__DataNotFoundException *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_ICatDOI__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_ICatDOI_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 ICatDOI_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ICatDOI_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI:
		return (void*)soap_instantiate_ICatDOI1__registerDatasetDOI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse:
		return (void*)soap_instantiate_ICatDOI1__registerDatasetDOIResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException:
		return (void*)soap_instantiate_ICatDOI1__DataNotFoundException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__DoiException:
		return (void*)soap_instantiate_ICatDOI1__DoiException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__InternalException:
		return (void*)soap_instantiate_ICatDOI1__InternalException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__ICATException:
		return (void*)soap_instantiate_ICatDOI1__ICATException(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI:
		return (void*)soap_instantiate_ICatDOI1__registerInvestigationDOI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse:
		return (void*)soap_instantiate_ICatDOI1__registerInvestigationDOIResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI:
		return (void*)soap_instantiate_ICatDOI1__registerDatafileDOI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse:
		return (void*)soap_instantiate_ICatDOI1__registerDatafileDOIResponse(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerInvestigationDOI:
		return (void*)soap_instantiate___ICatDOI1__registerInvestigationDOI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatafileDOI:
		return (void*)soap_instantiate___ICatDOI1__registerDatafileDOI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatasetDOI:
		return (void*)soap_instantiate___ICatDOI1__registerDatasetDOI(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 ICatDOI_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ICatDOI_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerDatasetDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerDatasetDOI*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerDatasetDOIResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerDatasetDOIResponse*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__DataNotFoundException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__DataNotFoundException*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__DoiException:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__DoiException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__DoiException*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__InternalException:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__InternalException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__InternalException*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__ICATException:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__ICATException*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__ICATException*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerInvestigationDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerInvestigationDOI*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerInvestigationDOIResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerInvestigationDOIResponse*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerDatafileDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerDatafileDOI*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse:
		if (p->size < 0)
			SOAP_DELETE((ICatDOI1__registerDatafileDOIResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ICatDOI1__registerDatafileDOIResponse*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerInvestigationDOI:
		if (p->size < 0)
			SOAP_DELETE((struct __ICatDOI1__registerInvestigationDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ICatDOI1__registerInvestigationDOI*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatafileDOI:
		if (p->size < 0)
			SOAP_DELETE((struct __ICatDOI1__registerDatafileDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ICatDOI1__registerDatafileDOI*)p->ptr);
		break;
	case SOAP_TYPE_ICatDOI___ICatDOI1__registerDatasetDOI:
		if (p->size < 0)
			SOAP_DELETE((struct __ICatDOI1__registerDatasetDOI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ICatDOI1__registerDatasetDOI*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_ICatDOI_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, ICatDOI_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, ICatDOI_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 ICatDOI_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_ICatDOI_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_ICatDOI_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ICatDOI_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ICatDOI_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_ICatDOI_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_ICatDOI_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ICatDOI_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ICatDOI_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ICatDOI_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ICatDOI_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_std__string, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ICatDOI1__registerDatafileDOIResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerDatafileDOIResponse::return_ = NULL;
	/* transient soap skipped */
}

void ICatDOI1__registerDatafileDOIResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerDatafileDOIResponse::return_);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerDatafileDOIResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerDatafileDOIResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerDatafileDOIResponse(struct soap *soap, const char *tag, int id, const ICatDOI1__registerDatafileDOIResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ICatDOI1__registerDatafileDOIResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerDatafileDOIResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerDatafileDOIResponse(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOIResponse * SOAP_FMAC4 soap_in_ICatDOI1__registerDatafileDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerDatafileDOIResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerDatafileDOIResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse, sizeof(ICatDOI1__registerDatafileDOIResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerDatafileDOIResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ICatDOI1__registerDatafileDOIResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerDatafileDOIResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse, 0, sizeof(ICatDOI1__registerDatafileDOIResponse), 0, soap_copy_ICatDOI1__registerDatafileDOIResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__registerDatafileDOIResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerDatafileDOIResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerDatafileDOIResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerDatafileDOIResponse(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOIResponse * SOAP_FMAC4 soap_get_ICatDOI1__registerDatafileDOIResponse(struct soap *soap, ICatDOI1__registerDatafileDOIResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerDatafileDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerDatafileDOIResponse * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerDatafileDOIResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerDatafileDOIResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerDatafileDOIResponse);
		if (size)
			*size = sizeof(ICatDOI1__registerDatafileDOIResponse);
		((ICatDOI1__registerDatafileDOIResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerDatafileDOIResponse, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerDatafileDOIResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerDatafileDOIResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerDatafileDOIResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerDatafileDOIResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerDatafileDOIResponse %p -> %p\n", q, p));
	*(ICatDOI1__registerDatafileDOIResponse*)p = *(ICatDOI1__registerDatafileDOIResponse*)q;
}

void ICatDOI1__registerDatafileDOI::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerDatafileDOI::arg0 = NULL;
	soap_default_LONG64(soap, &this->ICatDOI1__registerDatafileDOI::arg1);
	/* transient soap skipped */
}

void ICatDOI1__registerDatafileDOI::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerDatafileDOI::arg0);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerDatafileDOI::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerDatafileDOI(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, int id, const ICatDOI1__registerDatafileDOI *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ICatDOI1__registerDatafileDOI::arg0), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "arg1", -1, &(a->ICatDOI1__registerDatafileDOI::arg1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerDatafileDOI::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerDatafileDOI(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOI * SOAP_FMAC4 soap_in_ICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, ICatDOI1__registerDatafileDOI *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerDatafileDOI *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI, sizeof(ICatDOI1__registerDatafileDOI), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerDatafileDOI *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ICatDOI1__registerDatafileDOI::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "arg1", &(a->ICatDOI1__registerDatafileDOI::arg1), "xsd:long"))
				{	soap_flag_arg11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerDatafileDOI *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI, 0, sizeof(ICatDOI1__registerDatafileDOI), 0, soap_copy_ICatDOI1__registerDatafileDOI);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg11 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ICatDOI1__registerDatafileDOI::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerDatafileDOI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerDatafileDOI::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerDatafileDOI(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOI * SOAP_FMAC4 soap_get_ICatDOI1__registerDatafileDOI(struct soap *soap, ICatDOI1__registerDatafileDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerDatafileDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerDatafileDOI * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerDatafileDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerDatafileDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerDatafileDOI);
		if (size)
			*size = sizeof(ICatDOI1__registerDatafileDOI);
		((ICatDOI1__registerDatafileDOI*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerDatafileDOI, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerDatafileDOI);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerDatafileDOI*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerDatafileDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerDatafileDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerDatafileDOI %p -> %p\n", q, p));
	*(ICatDOI1__registerDatafileDOI*)p = *(ICatDOI1__registerDatafileDOI*)q;
}

void ICatDOI1__registerInvestigationDOIResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerInvestigationDOIResponse::return_ = NULL;
	/* transient soap skipped */
}

void ICatDOI1__registerInvestigationDOIResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerInvestigationDOIResponse::return_);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerInvestigationDOIResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerInvestigationDOIResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerInvestigationDOIResponse(struct soap *soap, const char *tag, int id, const ICatDOI1__registerInvestigationDOIResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ICatDOI1__registerInvestigationDOIResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerInvestigationDOIResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerInvestigationDOIResponse(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOIResponse * SOAP_FMAC4 soap_in_ICatDOI1__registerInvestigationDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerInvestigationDOIResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerInvestigationDOIResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse, sizeof(ICatDOI1__registerInvestigationDOIResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerInvestigationDOIResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ICatDOI1__registerInvestigationDOIResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerInvestigationDOIResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse, 0, sizeof(ICatDOI1__registerInvestigationDOIResponse), 0, soap_copy_ICatDOI1__registerInvestigationDOIResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__registerInvestigationDOIResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerInvestigationDOIResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerInvestigationDOIResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerInvestigationDOIResponse(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOIResponse * SOAP_FMAC4 soap_get_ICatDOI1__registerInvestigationDOIResponse(struct soap *soap, ICatDOI1__registerInvestigationDOIResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerInvestigationDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerInvestigationDOIResponse * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerInvestigationDOIResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerInvestigationDOIResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerInvestigationDOIResponse);
		if (size)
			*size = sizeof(ICatDOI1__registerInvestigationDOIResponse);
		((ICatDOI1__registerInvestigationDOIResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerInvestigationDOIResponse, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerInvestigationDOIResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerInvestigationDOIResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerInvestigationDOIResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerInvestigationDOIResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerInvestigationDOIResponse %p -> %p\n", q, p));
	*(ICatDOI1__registerInvestigationDOIResponse*)p = *(ICatDOI1__registerInvestigationDOIResponse*)q;
}

void ICatDOI1__registerInvestigationDOI::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerInvestigationDOI::arg0 = NULL;
	soap_default_LONG64(soap, &this->ICatDOI1__registerInvestigationDOI::arg1);
	/* transient soap skipped */
}

void ICatDOI1__registerInvestigationDOI::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerInvestigationDOI::arg0);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerInvestigationDOI::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerInvestigationDOI(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, int id, const ICatDOI1__registerInvestigationDOI *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ICatDOI1__registerInvestigationDOI::arg0), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "arg1", -1, &(a->ICatDOI1__registerInvestigationDOI::arg1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerInvestigationDOI::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerInvestigationDOI(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOI * SOAP_FMAC4 soap_in_ICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, ICatDOI1__registerInvestigationDOI *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerInvestigationDOI *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI, sizeof(ICatDOI1__registerInvestigationDOI), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerInvestigationDOI *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ICatDOI1__registerInvestigationDOI::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "arg1", &(a->ICatDOI1__registerInvestigationDOI::arg1), "xsd:long"))
				{	soap_flag_arg11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerInvestigationDOI *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI, 0, sizeof(ICatDOI1__registerInvestigationDOI), 0, soap_copy_ICatDOI1__registerInvestigationDOI);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg11 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ICatDOI1__registerInvestigationDOI::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerInvestigationDOI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerInvestigationDOI::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerInvestigationDOI(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOI * SOAP_FMAC4 soap_get_ICatDOI1__registerInvestigationDOI(struct soap *soap, ICatDOI1__registerInvestigationDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerInvestigationDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerInvestigationDOI * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerInvestigationDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerInvestigationDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerInvestigationDOI);
		if (size)
			*size = sizeof(ICatDOI1__registerInvestigationDOI);
		((ICatDOI1__registerInvestigationDOI*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerInvestigationDOI, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerInvestigationDOI);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerInvestigationDOI*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerInvestigationDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerInvestigationDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerInvestigationDOI %p -> %p\n", q, p));
	*(ICatDOI1__registerInvestigationDOI*)p = *(ICatDOI1__registerInvestigationDOI*)q;
}

void ICatDOI1__ICATException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__ICATException::message = NULL;
	/* transient soap skipped */
}

void ICatDOI1__ICATException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__ICATException::message);
	/* transient soap skipped */
#endif
}

int ICatDOI1__ICATException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__ICATException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__ICATException(struct soap *soap, const char *tag, int id, const ICatDOI1__ICATException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ICatDOI1__ICATException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__ICATException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__ICATException(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__ICATException * SOAP_FMAC4 soap_in_ICatDOI1__ICATException(struct soap *soap, const char *tag, ICatDOI1__ICATException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__ICATException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException, sizeof(ICatDOI1__ICATException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__ICATException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__ICATException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ICatDOI1__ICATException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__ICATException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException, 0, sizeof(ICatDOI1__ICATException), 0, soap_copy_ICatDOI1__ICATException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__ICATException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:ICATException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__ICATException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__ICATException(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__ICATException * SOAP_FMAC4 soap_get_ICatDOI1__ICATException(struct soap *soap, ICatDOI1__ICATException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__ICATException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__ICATException * SOAP_FMAC2 soap_instantiate_ICatDOI1__ICATException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__ICATException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__ICATException);
		if (size)
			*size = sizeof(ICatDOI1__ICATException);
		((ICatDOI1__ICATException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__ICATException, n);
		if (size)
			*size = n * sizeof(ICatDOI1__ICATException);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__ICATException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__ICATException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__ICATException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__ICATException %p -> %p\n", q, p));
	*(ICatDOI1__ICATException*)p = *(ICatDOI1__ICATException*)q;
}

void ICatDOI1__InternalException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__InternalException::message = NULL;
	/* transient soap skipped */
}

void ICatDOI1__InternalException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__InternalException::message);
	/* transient soap skipped */
#endif
}

int ICatDOI1__InternalException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__InternalException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__InternalException(struct soap *soap, const char *tag, int id, const ICatDOI1__InternalException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ICatDOI1__InternalException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__InternalException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__InternalException(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__InternalException * SOAP_FMAC4 soap_in_ICatDOI1__InternalException(struct soap *soap, const char *tag, ICatDOI1__InternalException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__InternalException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException, sizeof(ICatDOI1__InternalException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__InternalException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__InternalException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ICatDOI1__InternalException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__InternalException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException, 0, sizeof(ICatDOI1__InternalException), 0, soap_copy_ICatDOI1__InternalException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__InternalException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:InternalException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__InternalException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__InternalException(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__InternalException * SOAP_FMAC4 soap_get_ICatDOI1__InternalException(struct soap *soap, ICatDOI1__InternalException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__InternalException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__InternalException * SOAP_FMAC2 soap_instantiate_ICatDOI1__InternalException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__InternalException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__InternalException);
		if (size)
			*size = sizeof(ICatDOI1__InternalException);
		((ICatDOI1__InternalException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__InternalException, n);
		if (size)
			*size = n * sizeof(ICatDOI1__InternalException);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__InternalException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__InternalException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__InternalException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__InternalException %p -> %p\n", q, p));
	*(ICatDOI1__InternalException*)p = *(ICatDOI1__InternalException*)q;
}

void ICatDOI1__DoiException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__DoiException::message = NULL;
	/* transient soap skipped */
}

void ICatDOI1__DoiException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__DoiException::message);
	/* transient soap skipped */
#endif
}

int ICatDOI1__DoiException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__DoiException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__DoiException(struct soap *soap, const char *tag, int id, const ICatDOI1__DoiException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ICatDOI1__DoiException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__DoiException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__DoiException(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__DoiException * SOAP_FMAC4 soap_in_ICatDOI1__DoiException(struct soap *soap, const char *tag, ICatDOI1__DoiException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__DoiException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException, sizeof(ICatDOI1__DoiException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__DoiException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__DoiException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ICatDOI1__DoiException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__DoiException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException, 0, sizeof(ICatDOI1__DoiException), 0, soap_copy_ICatDOI1__DoiException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__DoiException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:DoiException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__DoiException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__DoiException(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__DoiException * SOAP_FMAC4 soap_get_ICatDOI1__DoiException(struct soap *soap, ICatDOI1__DoiException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__DoiException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__DoiException * SOAP_FMAC2 soap_instantiate_ICatDOI1__DoiException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__DoiException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__DoiException);
		if (size)
			*size = sizeof(ICatDOI1__DoiException);
		((ICatDOI1__DoiException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__DoiException, n);
		if (size)
			*size = n * sizeof(ICatDOI1__DoiException);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__DoiException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__DoiException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__DoiException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__DoiException %p -> %p\n", q, p));
	*(ICatDOI1__DoiException*)p = *(ICatDOI1__DoiException*)q;
}

void ICatDOI1__DataNotFoundException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__DataNotFoundException::message = NULL;
	/* transient soap skipped */
}

void ICatDOI1__DataNotFoundException::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__DataNotFoundException::message);
	/* transient soap skipped */
#endif
}

int ICatDOI1__DataNotFoundException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__DataNotFoundException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__DataNotFoundException(struct soap *soap, const char *tag, int id, const ICatDOI1__DataNotFoundException *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &(a->ICatDOI1__DataNotFoundException::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__DataNotFoundException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__DataNotFoundException(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__DataNotFoundException * SOAP_FMAC4 soap_in_ICatDOI1__DataNotFoundException(struct soap *soap, const char *tag, ICatDOI1__DataNotFoundException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__DataNotFoundException *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException, sizeof(ICatDOI1__DataNotFoundException), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__DataNotFoundException *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &(a->ICatDOI1__DataNotFoundException::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__DataNotFoundException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException, 0, sizeof(ICatDOI1__DataNotFoundException), 0, soap_copy_ICatDOI1__DataNotFoundException);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__DataNotFoundException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:DataNotFoundException", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__DataNotFoundException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__DataNotFoundException(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__DataNotFoundException * SOAP_FMAC4 soap_get_ICatDOI1__DataNotFoundException(struct soap *soap, ICatDOI1__DataNotFoundException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__DataNotFoundException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__DataNotFoundException * SOAP_FMAC2 soap_instantiate_ICatDOI1__DataNotFoundException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__DataNotFoundException(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__DataNotFoundException);
		if (size)
			*size = sizeof(ICatDOI1__DataNotFoundException);
		((ICatDOI1__DataNotFoundException*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__DataNotFoundException, n);
		if (size)
			*size = n * sizeof(ICatDOI1__DataNotFoundException);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__DataNotFoundException*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__DataNotFoundException*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__DataNotFoundException(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__DataNotFoundException %p -> %p\n", q, p));
	*(ICatDOI1__DataNotFoundException*)p = *(ICatDOI1__DataNotFoundException*)q;
}

void ICatDOI1__registerDatasetDOIResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerDatasetDOIResponse::return_ = NULL;
	/* transient soap skipped */
}

void ICatDOI1__registerDatasetDOIResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerDatasetDOIResponse::return_);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerDatasetDOIResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerDatasetDOIResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerDatasetDOIResponse(struct soap *soap, const char *tag, int id, const ICatDOI1__registerDatasetDOIResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ICatDOI1__registerDatasetDOIResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerDatasetDOIResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerDatasetDOIResponse(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOIResponse * SOAP_FMAC4 soap_in_ICatDOI1__registerDatasetDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerDatasetDOIResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerDatasetDOIResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse, sizeof(ICatDOI1__registerDatasetDOIResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerDatasetDOIResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ICatDOI1__registerDatasetDOIResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerDatasetDOIResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse, 0, sizeof(ICatDOI1__registerDatasetDOIResponse), 0, soap_copy_ICatDOI1__registerDatasetDOIResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ICatDOI1__registerDatasetDOIResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerDatasetDOIResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerDatasetDOIResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerDatasetDOIResponse(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOIResponse * SOAP_FMAC4 soap_get_ICatDOI1__registerDatasetDOIResponse(struct soap *soap, ICatDOI1__registerDatasetDOIResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerDatasetDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerDatasetDOIResponse * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerDatasetDOIResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerDatasetDOIResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerDatasetDOIResponse);
		if (size)
			*size = sizeof(ICatDOI1__registerDatasetDOIResponse);
		((ICatDOI1__registerDatasetDOIResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerDatasetDOIResponse, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerDatasetDOIResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerDatasetDOIResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerDatasetDOIResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerDatasetDOIResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerDatasetDOIResponse %p -> %p\n", q, p));
	*(ICatDOI1__registerDatasetDOIResponse*)p = *(ICatDOI1__registerDatasetDOIResponse*)q;
}

void ICatDOI1__registerDatasetDOI::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ICatDOI1__registerDatasetDOI::arg0 = NULL;
	soap_default_LONG64(soap, &this->ICatDOI1__registerDatasetDOI::arg1);
	/* transient soap skipped */
}

void ICatDOI1__registerDatasetDOI::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ICatDOI1__registerDatasetDOI::arg0);
	/* transient soap skipped */
#endif
}

int ICatDOI1__registerDatasetDOI::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ICatDOI1__registerDatasetDOI(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, int id, const ICatDOI1__registerDatasetDOI *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ICatDOI1__registerDatasetDOI::arg0), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "arg1", -1, &(a->ICatDOI1__registerDatasetDOI::arg1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ICatDOI1__registerDatasetDOI::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ICatDOI1__registerDatasetDOI(soap, tag, this, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOI * SOAP_FMAC4 soap_in_ICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, ICatDOI1__registerDatasetDOI *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ICatDOI1__registerDatasetDOI *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI, sizeof(ICatDOI1__registerDatasetDOI), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ICatDOI1__registerDatasetDOI *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ICatDOI1__registerDatasetDOI::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "arg1", &(a->ICatDOI1__registerDatasetDOI::arg1), "xsd:long"))
				{	soap_flag_arg11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ICatDOI1__registerDatasetDOI *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI, 0, sizeof(ICatDOI1__registerDatasetDOI), 0, soap_copy_ICatDOI1__registerDatasetDOI);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg11 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ICatDOI1__registerDatasetDOI::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI);
	if (this->soap_out(soap, tag?tag:"ICatDOI1:registerDatasetDOI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ICatDOI1__registerDatasetDOI::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ICatDOI1__registerDatasetDOI(soap, this, tag, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOI * SOAP_FMAC4 soap_get_ICatDOI1__registerDatasetDOI(struct soap *soap, ICatDOI1__registerDatasetDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in_ICatDOI1__registerDatasetDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ICatDOI1__registerDatasetDOI * SOAP_FMAC2 soap_instantiate_ICatDOI1__registerDatasetDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ICatDOI1__registerDatasetDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ICatDOI1__registerDatasetDOI);
		if (size)
			*size = sizeof(ICatDOI1__registerDatasetDOI);
		((ICatDOI1__registerDatasetDOI*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ICatDOI1__registerDatasetDOI, n);
		if (size)
			*size = n * sizeof(ICatDOI1__registerDatasetDOI);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ICatDOI1__registerDatasetDOI*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ICatDOI1__registerDatasetDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ICatDOI1__registerDatasetDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ICatDOI1__registerDatasetDOI %p -> %p\n", q, p));
	*(ICatDOI1__registerDatasetDOI*)p = *(ICatDOI1__registerDatasetDOI*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_SOAP_ENV__Fault, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_SOAP_ENV__Code, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_SOAP_ENV__Header, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ICatDOI1__registerDatasetDOI(struct soap *soap, struct __ICatDOI1__registerDatasetDOI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ICatDOI1__registerDatasetDOI_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ICatDOI1__registerDatasetDOI(struct soap *soap, const struct __ICatDOI1__registerDatasetDOI *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToICatDOI1__registerDatasetDOI(soap, &a->ICatDOI1__registerDatasetDOI_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, int id, const struct __ICatDOI1__registerDatasetDOI *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerToICatDOI1__registerDatasetDOI(soap, "ICatDOI1:registerDatasetDOI", -1, &a->ICatDOI1__registerDatasetDOI_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerDatasetDOI * SOAP_FMAC4 soap_in___ICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, struct __ICatDOI1__registerDatasetDOI *a, const char *type)
{
	size_t soap_flag_ICatDOI1__registerDatasetDOI_ = 1;
	short soap_flag;
	a = (struct __ICatDOI1__registerDatasetDOI *)soap_id_enter(soap, "", a, SOAP_TYPE_ICatDOI___ICatDOI1__registerDatasetDOI, sizeof(struct __ICatDOI1__registerDatasetDOI), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ICatDOI1__registerDatasetDOI(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ICatDOI1__registerDatasetDOI_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__registerDatasetDOI(soap, "ICatDOI1:registerDatasetDOI", &a->ICatDOI1__registerDatasetDOI_, "ICatDOI1:registerDatasetDOI"))
				{	soap_flag_ICatDOI1__registerDatasetDOI_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ICatDOI1__registerDatasetDOI(struct soap *soap, const struct __ICatDOI1__registerDatasetDOI *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ICatDOI1__registerDatasetDOI(soap, tag?tag:"-ICatDOI1:registerDatasetDOI", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerDatasetDOI * SOAP_FMAC4 soap_get___ICatDOI1__registerDatasetDOI(struct soap *soap, struct __ICatDOI1__registerDatasetDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in___ICatDOI1__registerDatasetDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ICatDOI1__registerDatasetDOI * SOAP_FMAC2 soap_instantiate___ICatDOI1__registerDatasetDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ICatDOI1__registerDatasetDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI___ICatDOI1__registerDatasetDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ICatDOI1__registerDatasetDOI);
		if (size)
			*size = sizeof(struct __ICatDOI1__registerDatasetDOI);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ICatDOI1__registerDatasetDOI, n);
		if (size)
			*size = n * sizeof(struct __ICatDOI1__registerDatasetDOI);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ICatDOI1__registerDatasetDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ICatDOI1__registerDatasetDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ICatDOI1__registerDatasetDOI %p -> %p\n", q, p));
	*(struct __ICatDOI1__registerDatasetDOI*)p = *(struct __ICatDOI1__registerDatasetDOI*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ICatDOI1__registerDatafileDOI(struct soap *soap, struct __ICatDOI1__registerDatafileDOI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ICatDOI1__registerDatafileDOI_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ICatDOI1__registerDatafileDOI(struct soap *soap, const struct __ICatDOI1__registerDatafileDOI *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToICatDOI1__registerDatafileDOI(soap, &a->ICatDOI1__registerDatafileDOI_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, int id, const struct __ICatDOI1__registerDatafileDOI *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerToICatDOI1__registerDatafileDOI(soap, "ICatDOI1:registerDatafileDOI", -1, &a->ICatDOI1__registerDatafileDOI_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerDatafileDOI * SOAP_FMAC4 soap_in___ICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, struct __ICatDOI1__registerDatafileDOI *a, const char *type)
{
	size_t soap_flag_ICatDOI1__registerDatafileDOI_ = 1;
	short soap_flag;
	a = (struct __ICatDOI1__registerDatafileDOI *)soap_id_enter(soap, "", a, SOAP_TYPE_ICatDOI___ICatDOI1__registerDatafileDOI, sizeof(struct __ICatDOI1__registerDatafileDOI), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ICatDOI1__registerDatafileDOI(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ICatDOI1__registerDatafileDOI_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__registerDatafileDOI(soap, "ICatDOI1:registerDatafileDOI", &a->ICatDOI1__registerDatafileDOI_, "ICatDOI1:registerDatafileDOI"))
				{	soap_flag_ICatDOI1__registerDatafileDOI_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ICatDOI1__registerDatafileDOI(struct soap *soap, const struct __ICatDOI1__registerDatafileDOI *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ICatDOI1__registerDatafileDOI(soap, tag?tag:"-ICatDOI1:registerDatafileDOI", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerDatafileDOI * SOAP_FMAC4 soap_get___ICatDOI1__registerDatafileDOI(struct soap *soap, struct __ICatDOI1__registerDatafileDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in___ICatDOI1__registerDatafileDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ICatDOI1__registerDatafileDOI * SOAP_FMAC2 soap_instantiate___ICatDOI1__registerDatafileDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ICatDOI1__registerDatafileDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI___ICatDOI1__registerDatafileDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ICatDOI1__registerDatafileDOI);
		if (size)
			*size = sizeof(struct __ICatDOI1__registerDatafileDOI);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ICatDOI1__registerDatafileDOI, n);
		if (size)
			*size = n * sizeof(struct __ICatDOI1__registerDatafileDOI);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ICatDOI1__registerDatafileDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ICatDOI1__registerDatafileDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ICatDOI1__registerDatafileDOI %p -> %p\n", q, p));
	*(struct __ICatDOI1__registerDatafileDOI*)p = *(struct __ICatDOI1__registerDatafileDOI*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ICatDOI1__registerInvestigationDOI(struct soap *soap, struct __ICatDOI1__registerInvestigationDOI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ICatDOI1__registerInvestigationDOI_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ICatDOI1__registerInvestigationDOI(struct soap *soap, const struct __ICatDOI1__registerInvestigationDOI *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToICatDOI1__registerInvestigationDOI(soap, &a->ICatDOI1__registerInvestigationDOI_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, int id, const struct __ICatDOI1__registerInvestigationDOI *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerToICatDOI1__registerInvestigationDOI(soap, "ICatDOI1:registerInvestigationDOI", -1, &a->ICatDOI1__registerInvestigationDOI_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerInvestigationDOI * SOAP_FMAC4 soap_in___ICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, struct __ICatDOI1__registerInvestigationDOI *a, const char *type)
{
	size_t soap_flag_ICatDOI1__registerInvestigationDOI_ = 1;
	short soap_flag;
	a = (struct __ICatDOI1__registerInvestigationDOI *)soap_id_enter(soap, "", a, SOAP_TYPE_ICatDOI___ICatDOI1__registerInvestigationDOI, sizeof(struct __ICatDOI1__registerInvestigationDOI), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ICatDOI1__registerInvestigationDOI(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ICatDOI1__registerInvestigationDOI_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__registerInvestigationDOI(soap, "ICatDOI1:registerInvestigationDOI", &a->ICatDOI1__registerInvestigationDOI_, "ICatDOI1:registerInvestigationDOI"))
				{	soap_flag_ICatDOI1__registerInvestigationDOI_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ICatDOI1__registerInvestigationDOI(struct soap *soap, const struct __ICatDOI1__registerInvestigationDOI *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ICatDOI1__registerInvestigationDOI(soap, tag?tag:"-ICatDOI1:registerInvestigationDOI", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ICatDOI1__registerInvestigationDOI * SOAP_FMAC4 soap_get___ICatDOI1__registerInvestigationDOI(struct soap *soap, struct __ICatDOI1__registerInvestigationDOI *p, const char *tag, const char *type)
{
	if ((p = soap_in___ICatDOI1__registerInvestigationDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ICatDOI1__registerInvestigationDOI * SOAP_FMAC2 soap_instantiate___ICatDOI1__registerInvestigationDOI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ICatDOI1__registerInvestigationDOI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI___ICatDOI1__registerInvestigationDOI, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ICatDOI1__registerInvestigationDOI);
		if (size)
			*size = sizeof(struct __ICatDOI1__registerInvestigationDOI);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ICatDOI1__registerInvestigationDOI, n);
		if (size)
			*size = n * sizeof(struct __ICatDOI1__registerInvestigationDOI);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ICatDOI1__registerInvestigationDOI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ICatDOI1__registerInvestigationDOI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ICatDOI1__registerInvestigationDOI %p -> %p\n", q, p));
	*(struct __ICatDOI1__registerInvestigationDOI*)p = *(struct __ICatDOI1__registerInvestigationDOI*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->ICatDOI1__DataNotFoundException_ = NULL;
	a->ICatDOI1__DoiException_ = NULL;
	a->ICatDOI1__ICATException_ = NULL;
	a->ICatDOI1__InternalException_ = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToICatDOI1__DataNotFoundException(soap, &a->ICatDOI1__DataNotFoundException_);
	soap_serialize_PointerToICatDOI1__DoiException(soap, &a->ICatDOI1__DoiException_);
	soap_serialize_PointerToICatDOI1__ICATException(soap, &a->ICatDOI1__ICATException_);
	soap_serialize_PointerToICatDOI1__InternalException(soap, &a->ICatDOI1__InternalException_);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_out_PointerToICatDOI1__DataNotFoundException(soap, "ICatDOI1:DataNotFoundException", -1, &a->ICatDOI1__DataNotFoundException_, ""))
		return soap->error;
	if (soap_out_PointerToICatDOI1__DoiException(soap, "ICatDOI1:DoiException", -1, &a->ICatDOI1__DoiException_, ""))
		return soap->error;
	if (soap_out_PointerToICatDOI1__ICATException(soap, "ICatDOI1:ICATException", -1, &a->ICatDOI1__ICATException_, ""))
		return soap->error;
	if (soap_out_PointerToICatDOI1__InternalException(soap, "ICatDOI1:InternalException", -1, &a->ICatDOI1__InternalException_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_ICatDOI1__DataNotFoundException_ = 1;
	size_t soap_flag_ICatDOI1__DoiException_ = 1;
	size_t soap_flag_ICatDOI1__ICATException_ = 1;
	size_t soap_flag_ICatDOI1__InternalException_ = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ICatDOI1__DataNotFoundException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__DataNotFoundException(soap, "ICatDOI1:DataNotFoundException", &a->ICatDOI1__DataNotFoundException_, "ICatDOI1:DataNotFoundException"))
				{	soap_flag_ICatDOI1__DataNotFoundException_--;
					continue;
				}
			if (soap_flag_ICatDOI1__DoiException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__DoiException(soap, "ICatDOI1:DoiException", &a->ICatDOI1__DoiException_, "ICatDOI1:DoiException"))
				{	soap_flag_ICatDOI1__DoiException_--;
					continue;
				}
			if (soap_flag_ICatDOI1__ICATException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__ICATException(soap, "ICatDOI1:ICATException", &a->ICatDOI1__ICATException_, "ICatDOI1:ICATException"))
				{	soap_flag_ICatDOI1__ICATException_--;
					continue;
				}
			if (soap_flag_ICatDOI1__InternalException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToICatDOI1__InternalException(soap, "ICatDOI1:InternalException", &a->ICatDOI1__InternalException_, "ICatDOI1:InternalException"))
				{	soap_flag_ICatDOI1__InternalException_--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail, n, ICatDOI_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerDatasetDOIResponse(struct soap *soap, ICatDOI1__registerDatasetDOIResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerDatasetDOIResponse(struct soap *soap, const char *tag, int id, ICatDOI1__registerDatasetDOIResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOIResponse ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerDatasetDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerDatasetDOIResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerDatasetDOIResponse **)soap_malloc(soap, sizeof(ICatDOI1__registerDatasetDOIResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerDatasetDOIResponse *)soap_instantiate_ICatDOI1__registerDatasetDOIResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerDatasetDOIResponse ** p = (ICatDOI1__registerDatasetDOIResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOIResponse, sizeof(ICatDOI1__registerDatasetDOIResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerDatasetDOIResponse(struct soap *soap, ICatDOI1__registerDatasetDOIResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOIResponse);
	if (soap_out_PointerToICatDOI1__registerDatasetDOIResponse(soap, tag?tag:"ICatDOI1:registerDatasetDOIResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOIResponse ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerDatasetDOIResponse(struct soap *soap, ICatDOI1__registerDatasetDOIResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerDatasetDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerDatasetDOI(struct soap *soap, ICatDOI1__registerDatasetDOI *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, int id, ICatDOI1__registerDatasetDOI *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOI ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerDatasetDOI(struct soap *soap, const char *tag, ICatDOI1__registerDatasetDOI **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerDatasetDOI **)soap_malloc(soap, sizeof(ICatDOI1__registerDatasetDOI *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerDatasetDOI *)soap_instantiate_ICatDOI1__registerDatasetDOI(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerDatasetDOI ** p = (ICatDOI1__registerDatasetDOI **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatasetDOI, sizeof(ICatDOI1__registerDatasetDOI), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerDatasetDOI(struct soap *soap, ICatDOI1__registerDatasetDOI *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatasetDOI);
	if (soap_out_PointerToICatDOI1__registerDatasetDOI(soap, tag?tag:"ICatDOI1:registerDatasetDOI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerDatasetDOI ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerDatasetDOI(struct soap *soap, ICatDOI1__registerDatasetDOI **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerDatasetDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerDatafileDOIResponse(struct soap *soap, ICatDOI1__registerDatafileDOIResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerDatafileDOIResponse(struct soap *soap, const char *tag, int id, ICatDOI1__registerDatafileDOIResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOIResponse ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerDatafileDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerDatafileDOIResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerDatafileDOIResponse **)soap_malloc(soap, sizeof(ICatDOI1__registerDatafileDOIResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerDatafileDOIResponse *)soap_instantiate_ICatDOI1__registerDatafileDOIResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerDatafileDOIResponse ** p = (ICatDOI1__registerDatafileDOIResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOIResponse, sizeof(ICatDOI1__registerDatafileDOIResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerDatafileDOIResponse(struct soap *soap, ICatDOI1__registerDatafileDOIResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOIResponse);
	if (soap_out_PointerToICatDOI1__registerDatafileDOIResponse(soap, tag?tag:"ICatDOI1:registerDatafileDOIResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOIResponse ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerDatafileDOIResponse(struct soap *soap, ICatDOI1__registerDatafileDOIResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerDatafileDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerDatafileDOI(struct soap *soap, ICatDOI1__registerDatafileDOI *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, int id, ICatDOI1__registerDatafileDOI *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOI ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerDatafileDOI(struct soap *soap, const char *tag, ICatDOI1__registerDatafileDOI **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerDatafileDOI **)soap_malloc(soap, sizeof(ICatDOI1__registerDatafileDOI *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerDatafileDOI *)soap_instantiate_ICatDOI1__registerDatafileDOI(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerDatafileDOI ** p = (ICatDOI1__registerDatafileDOI **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerDatafileDOI, sizeof(ICatDOI1__registerDatafileDOI), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerDatafileDOI(struct soap *soap, ICatDOI1__registerDatafileDOI *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerDatafileDOI);
	if (soap_out_PointerToICatDOI1__registerDatafileDOI(soap, tag?tag:"ICatDOI1:registerDatafileDOI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerDatafileDOI ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerDatafileDOI(struct soap *soap, ICatDOI1__registerDatafileDOI **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerDatafileDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerInvestigationDOIResponse(struct soap *soap, ICatDOI1__registerInvestigationDOIResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerInvestigationDOIResponse(struct soap *soap, const char *tag, int id, ICatDOI1__registerInvestigationDOIResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOIResponse ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerInvestigationDOIResponse(struct soap *soap, const char *tag, ICatDOI1__registerInvestigationDOIResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerInvestigationDOIResponse **)soap_malloc(soap, sizeof(ICatDOI1__registerInvestigationDOIResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerInvestigationDOIResponse *)soap_instantiate_ICatDOI1__registerInvestigationDOIResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerInvestigationDOIResponse ** p = (ICatDOI1__registerInvestigationDOIResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOIResponse, sizeof(ICatDOI1__registerInvestigationDOIResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerInvestigationDOIResponse(struct soap *soap, ICatDOI1__registerInvestigationDOIResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOIResponse);
	if (soap_out_PointerToICatDOI1__registerInvestigationDOIResponse(soap, tag?tag:"ICatDOI1:registerInvestigationDOIResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOIResponse ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerInvestigationDOIResponse(struct soap *soap, ICatDOI1__registerInvestigationDOIResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerInvestigationDOIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__registerInvestigationDOI(struct soap *soap, ICatDOI1__registerInvestigationDOI *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, int id, ICatDOI1__registerInvestigationDOI *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOI ** SOAP_FMAC4 soap_in_PointerToICatDOI1__registerInvestigationDOI(struct soap *soap, const char *tag, ICatDOI1__registerInvestigationDOI **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__registerInvestigationDOI **)soap_malloc(soap, sizeof(ICatDOI1__registerInvestigationDOI *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__registerInvestigationDOI *)soap_instantiate_ICatDOI1__registerInvestigationDOI(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__registerInvestigationDOI ** p = (ICatDOI1__registerInvestigationDOI **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__registerInvestigationDOI, sizeof(ICatDOI1__registerInvestigationDOI), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__registerInvestigationDOI(struct soap *soap, ICatDOI1__registerInvestigationDOI *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__registerInvestigationDOI);
	if (soap_out_PointerToICatDOI1__registerInvestigationDOI(soap, tag?tag:"ICatDOI1:registerInvestigationDOI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__registerInvestigationDOI ** SOAP_FMAC4 soap_get_PointerToICatDOI1__registerInvestigationDOI(struct soap *soap, ICatDOI1__registerInvestigationDOI **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__registerInvestigationDOI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__InternalException(struct soap *soap, ICatDOI1__InternalException *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__InternalException(struct soap *soap, const char *tag, int id, ICatDOI1__InternalException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__InternalException ** SOAP_FMAC4 soap_in_PointerToICatDOI1__InternalException(struct soap *soap, const char *tag, ICatDOI1__InternalException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__InternalException **)soap_malloc(soap, sizeof(ICatDOI1__InternalException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__InternalException *)soap_instantiate_ICatDOI1__InternalException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__InternalException ** p = (ICatDOI1__InternalException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__InternalException, sizeof(ICatDOI1__InternalException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__InternalException(struct soap *soap, ICatDOI1__InternalException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__InternalException);
	if (soap_out_PointerToICatDOI1__InternalException(soap, tag?tag:"ICatDOI1:InternalException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__InternalException ** SOAP_FMAC4 soap_get_PointerToICatDOI1__InternalException(struct soap *soap, ICatDOI1__InternalException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__InternalException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__ICATException(struct soap *soap, ICatDOI1__ICATException *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__ICATException(struct soap *soap, const char *tag, int id, ICatDOI1__ICATException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__ICATException ** SOAP_FMAC4 soap_in_PointerToICatDOI1__ICATException(struct soap *soap, const char *tag, ICatDOI1__ICATException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__ICATException **)soap_malloc(soap, sizeof(ICatDOI1__ICATException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__ICATException *)soap_instantiate_ICatDOI1__ICATException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__ICATException ** p = (ICatDOI1__ICATException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__ICATException, sizeof(ICatDOI1__ICATException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__ICATException(struct soap *soap, ICatDOI1__ICATException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__ICATException);
	if (soap_out_PointerToICatDOI1__ICATException(soap, tag?tag:"ICatDOI1:ICATException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__ICATException ** SOAP_FMAC4 soap_get_PointerToICatDOI1__ICATException(struct soap *soap, ICatDOI1__ICATException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__ICATException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__DoiException(struct soap *soap, ICatDOI1__DoiException *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__DoiException(struct soap *soap, const char *tag, int id, ICatDOI1__DoiException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__DoiException ** SOAP_FMAC4 soap_in_PointerToICatDOI1__DoiException(struct soap *soap, const char *tag, ICatDOI1__DoiException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__DoiException **)soap_malloc(soap, sizeof(ICatDOI1__DoiException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__DoiException *)soap_instantiate_ICatDOI1__DoiException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__DoiException ** p = (ICatDOI1__DoiException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__DoiException, sizeof(ICatDOI1__DoiException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__DoiException(struct soap *soap, ICatDOI1__DoiException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__DoiException);
	if (soap_out_PointerToICatDOI1__DoiException(soap, tag?tag:"ICatDOI1:DoiException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__DoiException ** SOAP_FMAC4 soap_get_PointerToICatDOI1__DoiException(struct soap *soap, ICatDOI1__DoiException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__DoiException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToICatDOI1__DataNotFoundException(struct soap *soap, ICatDOI1__DataNotFoundException *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToICatDOI1__DataNotFoundException(struct soap *soap, const char *tag, int id, ICatDOI1__DataNotFoundException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ICatDOI1__DataNotFoundException ** SOAP_FMAC4 soap_in_PointerToICatDOI1__DataNotFoundException(struct soap *soap, const char *tag, ICatDOI1__DataNotFoundException **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ICatDOI1__DataNotFoundException **)soap_malloc(soap, sizeof(ICatDOI1__DataNotFoundException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ICatDOI1__DataNotFoundException *)soap_instantiate_ICatDOI1__DataNotFoundException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ICatDOI1__DataNotFoundException ** p = (ICatDOI1__DataNotFoundException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_ICatDOI1__DataNotFoundException, sizeof(ICatDOI1__DataNotFoundException), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToICatDOI1__DataNotFoundException(struct soap *soap, ICatDOI1__DataNotFoundException *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerToICatDOI1__DataNotFoundException);
	if (soap_out_PointerToICatDOI1__DataNotFoundException(soap, tag?tag:"ICatDOI1:DataNotFoundException", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ICatDOI1__DataNotFoundException ** SOAP_FMAC4 soap_get_PointerToICatDOI1__DataNotFoundException(struct soap *soap, ICatDOI1__DataNotFoundException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToICatDOI1__DataNotFoundException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ICatDOI_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ICatDOI_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ICatDOI_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_ICatDOI__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ICatDOI__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ICatDOI__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_ICatDOI_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ICatDOI_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ICatDOI_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ICatDOI_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace ICatDOI


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of ICatDOIC.cpp */
